
CMSIS_F4_TIM10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  000103f8  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  000103f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003f8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d0e  00000000  00000000  0001046b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002c2  00000000  00000000  00011179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00011440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005e  00000000  00000000  000114d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dc51  00000000  00000000  0001152e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b76  00000000  00000000  0001f17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fb1b  00000000  00000000  0001fcf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000134  00000000  00000000  0006f810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0006f944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003d8 	.word	0x080003d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003d8 	.word	0x080003d8

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	2b00      	cmp	r3, #0
 8000208:	db0b      	blt.n	8000222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	f003 021f 	and.w	r2, r3, #31
 8000210:	4907      	ldr	r1, [pc, #28]	; (8000230 <__NVIC_EnableIRQ+0x38>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	095b      	lsrs	r3, r3, #5
 8000218:	2001      	movs	r0, #1
 800021a:	fa00 f202 	lsl.w	r2, r0, r2
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000e100 	.word	0xe000e100

08000234 <led_init>:

	__IO uint32_t Tim10_Count = 0;



	void led_init(){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

		RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN; //RCC on for GPIO C
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <led_init+0x34>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <led_init+0x34>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER &= ~0x00000C00; /* clear pin mode */
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <led_init+0x38>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a08      	ldr	r2, [pc, #32]	; (800026c <led_init+0x38>)
 800024a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800024e:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER |= GPIO_MODER_MODER5_0; /* set pin to output mode */
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <led_init+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <led_init+0x38>)
 8000256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025a:	6013      	str	r3, [r2, #0]

	}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000

08000270 <tim10_init>:

	void tim10_init(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
		RCC->APB2ENR |= RCC_APB2ENR_TIM10EN; // тактирование
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <tim10_init+0x2c>)
 8000276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <tim10_init+0x2c>)
 800027a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027e:	6453      	str	r3, [r2, #68]	; 0x44
		NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); // глоб прер
 8000280:	2019      	movs	r0, #25
 8000282:	f7ff ffb9 	bl	80001f8 <__NVIC_EnableIRQ>
		TIM10->PSC = 16000;// преддел
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <tim10_init+0x30>)
 8000288:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800028c:	629a      	str	r2, [r3, #40]	; 0x28
		//CLEAR_REG(TIM10->ARR);
		TIM10->ARR	= 999;
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <tim10_init+0x30>)
 8000290:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000294:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40014400 	.word	0x40014400

080002a4 <TIM1_UP_TIM10_IRQHandler>:


	void TIM1_UP_TIM10_IRQHandler(void){
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

		if(READ_BIT(TIM10->SR, TIM_SR_UIF)){
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80002aa:	691b      	ldr	r3, [r3, #16]
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d021      	beq.n	80002f8 <TIM1_UP_TIM10_IRQHandler+0x54>

			TIM10->SR &= ~TIM_SR_UIF;
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80002ba:	f023 0301 	bic.w	r3, r3, #1
 80002be:	6113      	str	r3, [r2, #16]
			switch(Tim10_Count)
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <TIM1_UP_TIM10_IRQHandler+0x64>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <TIM1_UP_TIM10_IRQHandler+0x2a>
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d004      	beq.n	80002d6 <TIM1_UP_TIM10_IRQHandler+0x32>
 80002cc:	e008      	b.n	80002e0 <TIM1_UP_TIM10_IRQHandler+0x3c>
			{
			case 0: LED_ON(); break;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <TIM1_UP_TIM10_IRQHandler+0x68>)
 80002d0:	2220      	movs	r2, #32
 80002d2:	619a      	str	r2, [r3, #24]
 80002d4:	e004      	b.n	80002e0 <TIM1_UP_TIM10_IRQHandler+0x3c>
			case 1: LED_OFF(); break;
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <TIM1_UP_TIM10_IRQHandler+0x68>)
 80002d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002dc:	619a      	str	r2, [r3, #24]
 80002de:	bf00      	nop
			}

			Tim10_Count++;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <TIM1_UP_TIM10_IRQHandler+0x64>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	4a08      	ldr	r2, [pc, #32]	; (8000308 <TIM1_UP_TIM10_IRQHandler+0x64>)
 80002e8:	6013      	str	r3, [r2, #0]
			if(Tim10_Count>1)
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <TIM1_UP_TIM10_IRQHandler+0x64>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d902      	bls.n	80002f8 <TIM1_UP_TIM10_IRQHandler+0x54>
			{
				Tim10_Count = 0;
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <TIM1_UP_TIM10_IRQHandler+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
			}

		}


	}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40014400 	.word	0x40014400
 8000308:	2000001c 	.word	0x2000001c
 800030c:	40020000 	.word	0x40020000

08000310 <main>:

int main(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

	led_init();
 8000314:	f7ff ff8e 	bl	8000234 <led_init>
	tim10_init();
 8000318:	f7ff ffaa 	bl	8000270 <tim10_init>
	TIM_EnableIT_UPDATE(TIM10);
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <main+0x28>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a05      	ldr	r2, [pc, #20]	; (8000338 <main+0x28>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	60d3      	str	r3, [r2, #12]
	TIM_EnableCounter(TIM10);
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <main+0x28>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a02      	ldr	r2, [pc, #8]	; (8000338 <main+0x28>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6013      	str	r3, [r2, #0]


	while(1){
 8000334:	e7fe      	b.n	8000334 <main+0x24>
 8000336:	bf00      	nop
 8000338:	40014400 	.word	0x40014400

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f7ff ff48 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ffcf 	bl	8000310 <main>

08000372 <LoopForever>:

LoopForever:
  b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	20000020 	.word	0x20000020

0800038c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	; (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	; (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	; (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
